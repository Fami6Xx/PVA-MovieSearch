datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  FavoriteMovie FavoriteMovie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Movie {
  id            String          @id @default(uuid())
  title         String
  image         String
  tags          MovieTag[] // Vztah N:M přes spojovací tabulku
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  FavoriteMovie FavoriteMovie[]
}

model Tag {
  id     String     @id @default(uuid())
  name   String     @unique
  movies MovieTag[] // Vztah N:M přes spojovací tabulku
}

model MovieTag {
  id      String @id @default(uuid())
  movieId String
  tagId   String
  movie   Movie  @relation(fields: [movieId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@unique([movieId, tagId]) // Zajišťuje, že kombinace movieId a tagId je unikátní
}

model FavoriteMovie {
  id      String @id @default(uuid())
  userId  String
  movieId String
  user    User   @relation(fields: [userId], references: [id])
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Zajišťuje, že kombinace userId a movieId je unikátní
}
